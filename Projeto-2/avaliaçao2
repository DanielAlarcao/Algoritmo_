#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define MAX_USUARIOS 1000
#define TAM_EMAIL 50
#define TAM_NOME 100
#define TAM_ENDERECO 200

struct Usuario {
    int id;
    char nomeCompleto[TAM_NOME];
    char email[TAM_EMAIL];
    char sexo[TAM_NOME];
    char endereco[TAM_ENDERECO];
    double altura;
    int vacina;
};

struct Usuario usuarios[MAX_USUARIOS];
int numUsuarios = 0;

// Função para gerar um ID aleatório para cada usuário
int gerarIdAleatorio() {
    return rand() % 10000 + 1;
}

// Função para cadastrar um novo usuário
void cadastrarUsuario() {
    if (numUsuarios == MAX_USUARIOS) {
        printf("Limite de usuários alcançado!!\n");
        return;
    }

    int novoId = gerarIdAleatorio();

    struct Usuario novoUsuario;

    printf("Nome completo: ");
    scanf(" %[^\n]", novoUsuario.nomeCompleto);

    printf("Email: ");
    scanf("%s", novoUsuario.email);

    if (strchr(novoUsuario.email, '@') == NULL) {
        printf("Email inválido!! Certifique-se de incluir o caractere '@'.\n");
        return;
    }

    printf("Sexo (Feminino, Masculino ou Indiferente): ");
    scanf("%s", novoUsuario.sexo);

    if (strcmp(novoUsuario.sexo, "Feminino") != 0 && strcmp(novoUsuario.sexo, "Masculino") != 0 &&
        strcmp(novoUsuario.sexo, "Indiferente") != 0) {
        printf("Sexo inválido!! Insere novamente Feminino, Masculino ou Indiferente.\n");
        return;
    }

    printf("Endereço: ");
    scanf(" %[^\n]", novoUsuario.endereco);

    printf("Altura (em metros): ");
    scanf("%lf", &novoUsuario.altura);

    if (novoUsuario.altura < 1.0 || novoUsuario.altura > 2.0) {
        printf("Altura inválida!! Digite um valor entre 1 e 2\n");
        return;
    }

    printf("Vacina (1 para Sim, 0 para Não): ");
    scanf("%d", &novoUsuario.vacina);

    novoUsuario.id = novoId;

    usuarios[numUsuarios] = novoUsuario;
    numUsuarios++;

    printf("Usuário cadastrado com sucesso!!\n");
}

// Função para editar os dados de um usuário
void editarUsuario() {
    char email[TAM_EMAIL];
    int i;

    printf("Insere o email do usuário que deseja editar: ");
    scanf("%s", email);

    for (i = 0; i < numUsuarios; i++) {
        if (strcmp(usuarios[i].email, email) == 0) {
            printf("Insere o novo nome completo: ");
            scanf(" %[^\n]", usuarios[i].nomeCompleto);

            printf("Insere o novo email: ");
            scanf("%s", usuarios[i].email);

            if (strchr(usuarios[i].email, '@') == NULL) {
                printf("Email inválido!! Certifique-se de incluir o caractere '@'.\n");
                return;
            }

            printf("Novo sexo (Feminino, Masculino ou Indiferente): ");
            scanf("%s", usuarios[i].sexo);

            if (strcmp(usuarios[i].sexo, "Feminino") != 0 && strcmp(usuarios[i].sexo, "Masculino") != 0 &&
                strcmp(usuarios[i].sexo, "Indiferente") != 0) {
                printf("Sexo inválido! Insere novamente Feminino, Masculino ou Indiferente.\n");
                return;
            }

            printf("Novo endereço: ");
            scanf(" %[^\n]", usuarios[i].endereco);

            printf("Nova altura: ");
            scanf("%lf", &usuarios[i].altura);

            if (usuarios[i].altura < 1.0 || usuarios[i].altura > 2.0) {
                printf("Altura inválida!! Digite um valor entre 1 e 2 metros\n");
                return;
            }

            printf("Vacina (1 para Sim, 0 para Não): ");
            scanf("%d", &usuarios[i].vacina);

            printf("Usuário editado com sucesso!!\n");
            return;
        }
    }

    printf("Usuário não encontrado!!\n");
}

// Função para excluir um usuário
void excluirUsuario() {
    char email[TAM_EMAIL];
    int i, j;

    printf("Insere o email do usuário que deseja excluir: ");
    scanf("%s", email);

    for (i = 0; i < numUsuarios; i++) {
        if (strcmp(usuarios[i].email, email) == 0) {
            for (j = i; j < numUsuarios - 1; j++) {
                usuarios[j] = usuarios[j + 1];
            }
            numUsuarios--;
            printf("Usuário excluído com sucesso!!\n");
            return;
        }
    }

    printf("Usuário não encontrado!!\n");
}

// Função para buscar um usuário pelo email
void buscarUsuarioPorEmail() {
    char email[TAM_EMAIL];
    int i;

    printf("Insere o email do usuário que deseja buscar: ");
    scanf("%s", email);

    for (i = 0; i < numUsuarios; i++) {
        if (strcmp(usuarios[i].email, email) == 0) {
            printf("Usuário encontrado:\n");
            printf("ID: %d\n", usuarios[i].id);
            printf("Nome: %s\n", usuarios[i].nomeCompleto);
            printf("Email: %s\n", usuarios[i].email);
            printf("Sexo: %s\n", usuarios[i].sexo);
            printf("Endereço: %s\n", usuarios[i].endereco);
            printf("Altura: %.2lf\n", usuarios[i].altura);
            printf("Vacina: %s\n", usuarios[i].vacina ? "Sim" : "Não");
            return;
        }
    }

    printf("Usuário não encontrado!\n");
}

// Função para imprimir todos os usuários cadastrados
void imprimirUsuarios() {
    int i;

    printf("Lista de Usuários:\n");

    for (i = 0; i < numUsuarios; i++) {
        printf("ID: %d\n", usuarios[i].id);
        printf("Nome: %s\n", usuarios[i].nomeCompleto);
        printf("Email: %s\n", usuarios[i].email);
        printf("Sexo: %s\n", usuarios[i].sexo);
        printf("Endereço: %s\n", usuarios[i].endereco);
        printf("Altura: %.2lf\n", usuarios[i].altura);
        printf("Vacina: %s\n\n", usuarios[i].vacina ? "Sim" : "Não");
    }
}

// Função para fazer backup dos usuários cadastrados
void fazerBackup() {
    FILE *arquivo;
    int i;

    arquivo = fopen("backup.txt", "w");

    if (arquivo == NULL) {
        printf("Erro ao abrir o arquivo de backup!\n");
        return;
    }

    for (i = 0; i < numUsuarios; i++) {
        fprintf(arquivo, "%d;%s;%s;%s;%s;%.2lf;%d\n", usuarios[i].id, usuarios[i].nomeCompleto, usuarios[i].email,
                usuarios[i].sexo, usuarios[i].endereco, usuarios[i].altura, usuarios[i].vacina);
    }

    fclose(arquivo);

    printf("Backup realizado com sucesso!\n");
}

// Função para realizar a restauração dos dados a partir do backup
void realizarRestauracao() {
    FILE *arquivo;
    char linha[500];
    int i = 0;

    arquivo = fopen("backup.txt", "r");

    if (arquivo == NULL) {
        printf("Erro ao abrir o arquivo de backup!\n");
        return;
    }

    numUsuarios = 0;

    while (fgets(linha, sizeof(linha), arquivo)) {
        sscanf(linha, "%d;%[^;];%[^;];%[^;];%[^;];%lf;%d", &usuarios[i].id, usuarios[i].nomeCompleto, usuarios[i].email,
               usuarios[i].sexo, usuarios[i].endereco, &usuarios[i].altura, &usuarios[i].vacina);
        i++;
        numUsuarios++;
    }

    fclose(arquivo);

    printf("Restauração concluída com sucesso! Foram recuperados %d usuários.\n", numUsuarios);
}

int main() {
    char opcao;

    srand(time(NULL));

    do {
        printf("Selecione uma opção:\n");
        printf("1. Criar usuário\n");
        printf("2. Atualizar dados de um usuário\n");
        printf("3. Deletar um usuário\n");
        printf("4. Buscar usuário por email\n");
        printf("5. Mostrar todos os usuários cadastrados\n");
        printf("6. Fazer backup \n");
        printf("7. Fazer Restauração dos dados\n");
        printf("8. Sair\n");

        printf("Opção: ");
        scanf(" %c", &opcao);

        switch (opcao) {
            case '1':
                cadastrarUsuario();
                break;
            case '2':
                editarUsuario();
                break;
            case '3':
                excluirUsuario();
                break;
            case '4':
                buscarUsuarioPorEmail();
                break;
            case '5':
                imprimirUsuarios();
                break;
            case '6':
                fazerBackup();
                break;
            case '7':
                realizarRestauracao();
                break;
            case '8':
                printf("Programa encerrado.\n");
                break;
            default:
                printf("Opção inválida! Digite uma opção válida.\n");
        }

        printf("\n");
    } while (opcao != '8');

    return 0;
}
